function addPath {
    local -i prefix=$1
    local dir=$2

    if [[ -d "$dir" ]]; then
        if [ $prefix -ne 0 ]; then
            path+=("$dir")
        else
            path=("$dir" $path)
        fi
    fi
}

# These must be listed in the reverse order!
addPath 1 '/sbin'
addPath 1 '/usr/sbin'
addPath 1 '/usr/local/sbin'
addPath 1 '/bin'
addPath 1 '/usr/bin'
addPath 1 '/usr/local/bin'
addPath 0 "$HOME/.cargo/bin"
addPath 0 "$HOME/go/bin"
addPath 1 "$HOME/bin"

if systemctl -q is-active graphical.target && [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then
    "$HOME/sway.sh"
    exit
fi

SCRIPT_PATH=${${(%):-%N}:A:h}

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export DISABLE_MAGIC_FUNCTIONS=true
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

source $SCRIPT_PATH/antigen.zsh
antigen init $HOME/.antigenrc

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


bindkey '^[^I' autosuggest-accept
bindkey '^ ' autosuggest-accept

# Double quote single quotes to "escape" them inside a single-quoted string
setopt rcquotes

# Setup prompt
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

alias -g G='| rg'
alias -g Gi='| rg'
alias -g L='| bat'
alias -g LP='| bat -p'
alias -g LC='| wc -l'
alias -g WC='| wc -l'
alias -g UC='| sort | uniq -c | sort -rh'


# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}" reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start { echoti smkx }
    function zle_application_mode_stop { echoti rmkx }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Interactive aliases
alias genSrc='mkdir -p src/{main,test}/{java,scala,resources} && touch src/{main,test}/{java,scala,resources}/.keep'
alias pssh='ssh -o PubkeyAuthentication=no'

# BASH_COLORS="$SCRIPT_PATH/base16/scripts/base16-tomorrow-night-eighties.sh"
# if [[ -f $BASH_COLORS ]]; then
#     source $BASH_COLORS
# fi

if [[ -f "$HOME/.config/broot/launcher/bash/br" ]]; then
    source "$HOME/.config/broot/launcher/bash/br"
fi
export RIPGREP_CONFIG_PATH="$SCRIPT_PATH/.ripgreprc"

if [ -x "$(command -v exa)" ]; then
    alias ls='exa --icons'

    alias l='exa -FG --icons'
    alias la='exa -FGa --icons'

    alias lla='exa -Flgha --icons'
    alias ll='exa -Flgh --icons'

    alias lt='exa -FT --icons'
    alias llt='exa -FlgT --icons'
    alias llta='exa -FalgT --icons'
else
    alias ls='ls -h --color=always'

    alias ll='ls -l'
    alias la='ls -A'
    alias l='ls -CF'

    alias llx='ll -X'
    alias lx='ls -X'
    alias lla='ls -lA'
fi

# BASH_COLORS="$SCRIPT_PATH/base16/scripts/base16-tomorrow-night-eighties.sh"
# if [[ -f $BASH_COLORS ]]; then
#     source $BASH_COLORS
# fi

if [[ -f ~/.lscolors ]]; then
    source ~/.lscolors
fi

#  If we have custom things we need to setup, do that now
if [[ -f ~/.zsh_custom ]]; then
    source ~/.zsh_custom
fi

__setupv() {
    NAME=$1;shift
    VERSION=$1;shift

    pyenv virtualenv --clear --force "$VERSION" "$NAME"
    pyenv shell "$NAME"
    pyenv exec pip install -U pip setuptools wheel
    pyenv exec pip install -U $@
    pyenv shell normal
}

setupv() {
    __setupv nvim3 3.11.1 colorama neovim "python-lsp-server[all]"
}

alias pyei='mold -run \
    env MAKE_OPTS="-j12" \
    env CONFIGURE_OPTS="--enable-shared --enable-optimizations --with-computed-gotos" \
    env CFLAGS="-march=native -mtune=native -pipe" \
    env CXXFLAGS="-march=native -mtune=native -pipe" \
    pyenv install -v'

alias pyein='mold -run \
    env MAKE_OPTS="-j12" \
    env CONFIGURE_OPTS="--enable-shared --with-computed-gotos" \
    env CFLAGS="-march=native -mtune=native -pipe" \
    env CXXFLAGS="-march=native -mtune=native -pipe" \
    pyenv install -v'

alias iatuin='RUSTFLAGS="-C target-cpu=native -C link-arg=-s" cargo install atuin --no-default-features --features client'
eval "$(pyenv init -)"

eval "$(zoxide init zsh --hook prompt)"

source "$HOME/.config/broot/launcher/bash/br"
