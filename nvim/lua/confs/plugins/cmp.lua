local c=require('cmp')local a=require('luasnip')c.setup({snippet={expand=function(b)return require('luasnip').lsp_expand(b.body)end},formatting={format=function(b,d)d.kind=require('lspkind').presets.default[d.kind]d.menu=({buffer='[Buff]',nvim_lsp='[LSP]',luasnip='[LuaSnip]',nvim_lua='[Lua]',latex_symbols='[Latex]'})[b.source.name]return d end},sources={{name='nvim_lsp'},{name='nvim_lua'},{name='path'},{name='luasnip'},{name='buffer',keyword_length=1},{name='calc'}}})return c.setup({mapping={['<C-Space>']=c.mapping.complete(),['<C-e>']=c.mapping.close(),['<C-u>']=c.mapping.scroll_docs(-4),['<C-d>']=c.mapping.scroll_docs(4),['<CR>']=c.mapping.confirm({behavior=c.ConfirmBehavior.Replace,select=false}),['<Tab>']=c.mapping(function(b)if c.visible()then return c.select_next_item()else if a.expand_or_jumpable()then return a.expand_or_jump()else return b()end end end,{'i','s'}),['<S-Tab>']=c.mapping(function(b)if c.visible()then return c.select_prev_item()elseif a.jumpable(-1)then return a.jump(-1)else return b()end end,{'i','s'})}})