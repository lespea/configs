cmp = require('cmp')
luasnip = require('luasnip')

cmp.setup {
    snippet: {
        expand: (args) -> require('luasnip').lsp_expand(args.body),
    }

    formatting: {
        format: (entry, vim_item) ->
            -- fancy icons and a name of kind
            vim_item.kind = require('lspkind').presets.default[vim_item.kind]

            -- set a name for each source
            vim_item.menu = ({
                buffer: '[Buff]',
                nvim_lsp: '[LSP]',
                luasnip: '[LuaSnip]',
                nvim_lua: '[Lua]',
                latex_symbols: '[Latex]',
            })[entry.source.name]
            return vim_item
    }

    sources: {
        {name: 'nvim_lsp'}
        {name: 'nvim_lua'}
        {name: 'path'}
        {name: 'luasnip'}
        {name: 'buffer', keyword_length: 1}
        {name: 'calc'}
    }
}

cmp.setup {
    mapping: {
        '<C-Space>': cmp.mapping.complete!
        '<C-e>': cmp.mapping.close!

        '<C-u>': cmp.mapping.scroll_docs(-4)
        '<C-d>': cmp.mapping.scroll_docs(4)

        '<CR>': cmp.mapping.confirm({
            behavior: cmp.ConfirmBehavior.Replace,
            select: false,
        })

        '<Tab>': cmp.mapping(
            (fallback) ->
                if cmp.visible!
                    cmp.select_next_item!

                else if luasnip.expand_or_jumpable()
                    luasnip.expand_or_jump!

                else
                    fallback!
            {'i', 's'}
        ),

        '<S-Tab>': cmp.mapping(
            (fallback) ->
                if cmp.visible()
                    cmp.select_prev_item!
                elseif luasnip.jumpable(-1)
                    luasnip.jump(-1)
                else
                    fallback!
            {'i', 's'}
        )

    }
}
